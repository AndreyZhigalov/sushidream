{"version":3,"file":"static/js/Menu.0280792b.chunk.js","mappings":"6LA6BA,EAtBsB,WACpB,OAAoCA,EAAAA,EAAAA,UAAsB,CACxDC,MAAO,EACPC,OAAQ,IAFV,eAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OAbAC,EAAAA,EAAAA,YAAU,WACR,GAAsB,qBAAXC,OAAwB,CACjC,IAAMC,EAAe,WACnBH,EAAc,CACZH,MAAOK,OAAOE,WACdN,OAAQI,OAAOG,eAKnB,OAFAH,OAAOI,iBAAiB,SAAUH,GAClCA,IACO,kBAAMD,OAAOK,oBAAoB,SAAUJ,OAEnD,IACIJ,G,qGCST,IACA,EAAe,IAA0B,8DCnCzC,EAAoC,2CAApC,EAAsF,8B,SCetF,EAVsD,SAAC,GAAiB,IAAfS,EAAc,EAAdA,QACvD,OACE,gBACEC,UAAS,UAAKC,EAAL,YAAiCF,GAAWE,GACrDC,QAAS,kBAAMT,OAAOU,SAAS,EAAG,IAFpC,UAGE,gBAAKC,IAAKC,EAAOC,IAAI,oG,UCuD3B,EAlDuB,WACrB,IAAMhB,EAAaiB,IACnB,GAAwCC,EAAAA,EAAAA,GAAeC,EAAAA,IAA/CC,EAAR,EAAQA,gBAAiBC,EAAzB,EAAyBA,WACzB,GAA4BH,EAAAA,EAAAA,GAAeI,EAAAA,IAAnCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OACTC,GAAmBC,EAAAA,EAAAA,MAAnBD,eAERE,EAAAA,WAAgB,WACdxB,OAAOU,SAAS,EAAG,KAClB,IAmBH,OACE,iCACE,gBAAKH,UAAWC,EAAAA,EAAAA,eAAhB,SACc,UAAXa,IACC,gBAAKd,UAAWC,EAAAA,EAAAA,YAAoBG,IArB1B,WAChB,IAAMc,EAASL,EAAQF,EAAWQ,QAAQT,IAC1C,GAAII,IAAWM,EAAAA,GAAAA,QACb,OAAOC,EAEP,GAAI/B,EAAWF,MAAO,CACpB,GAAIE,EAAWF,MAAQ,IACrB,OAAO8B,EAAO,MAAUA,EAAO,MAAUG,EACpC,GAAI/B,EAAWF,MAAQ,IAC5B,OAAO8B,EAAO,KAASA,EAAO,KAASG,EAClC,GAAI/B,EAAWF,OAAS,IAC7B,OAAO8B,EAAO,KAASA,EAAO,KAASG,GAUEC,GAAahB,IAAI,cAG9D,iBAAKN,UAAWC,EAAAA,EAAAA,aAAhB,WACE,SAAC,KAAD,CAAYsB,SAAU,CAAC,GAAI,GAAIC,SAAUT,KACzC,SAAC,KAAD,KACA,SAAC,KAAD,KACA,SAAC,EAAD,CAAiBhB,SAAUgB,IAC1BzB,EAAWF,MAAQ,MAClB,iBAAKY,UAAS,UAAKC,EAAAA,EAAAA,cAAL,YAA8Bc,EAAgC,GAAfd,EAAAA,EAAAA,OAA7D,WACE,SAAC,KAAD,KACA,SAAC,KAAD","sources":["Hooks/useScreenSize.ts","assets/icons/ArrowHead.svg","webpack://planetsushi/./src/componenst/ScrollTopButton/ScrollTopButton.module.scss?909f","componenst/ScrollTopButton/index.tsx","pages/Menu.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\ntype ScreenProps = {\r\n  width: number ;\r\n  height: number ;\r\n};\r\n\r\nconst useScreenSize = () => {\r\n  const [screenSize, setScreenSize] = useState<ScreenProps>({\r\n    width: 0,\r\n    height: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      const handleResize = () => {\r\n        setScreenSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight,\r\n        });\r\n      };\r\n      window.addEventListener('resize', handleResize);\r\n      handleResize();\r\n      return () => window.removeEventListener('resize', handleResize);\r\n    }\r\n  }, []);\r\n  return screenSize;\r\n};\r\n\r\nexport default useScreenSize;\r\n","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrowHead(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 30,\n    height: 21,\n    viewBox: \"0 0 30 21\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2.5 19L15 4L27.5 19\",\n    stroke: \"white\",\n    strokeWidth: 4,\n    strokeLinecap: \"round\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowHead);\nexport default __webpack_public_path__ + \"static/media/ArrowHead.c2a0fdb50bb327019f13dd2af983ec50.svg\";\nexport { ForwardRef as ReactComponent };","// extracted by mini-css-extract-plugin\nexport default {\"scroll_top_button\":\"ScrollTopButton_scroll_top_button__7ZIwM\",\"show\":\"ScrollTopButton_show__GgNfS\"};","import React from 'react';\r\n\r\nimport arrow from '../../assets/icons/ArrowHead.svg';\r\n\r\nimport styles from './ScrollTopButton.module.scss';\r\n\r\nconst ScrollTopButton: React.FC<{isShown: boolean}> = ({ isShown }) => {\r\n  return (\r\n    <div\r\n      className={`${styles.scroll_top_button} ${isShown && styles.show}`}\r\n      onClick={() => window.scrollTo(0, 0)}>\r\n      <img src={arrow} alt=\"К началу страницы\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollTopButton;\r\n","import React from 'react';\r\nimport { useAppSelector } from '../Hooks/hooks';\r\nimport useScreenSize from '../Hooks/useScreenSize';\r\n\r\nimport { AccortmentBlock, Navigation, Check, Sort, DeliveryRegion } from '../componenst';\r\n\r\nimport { selectFilters } from '../redux/slices/filtersSlice';\r\nimport { selectAssortment, Status } from '../redux/slices/assortmentSlice';\r\n\r\nimport bannerLoader from '../assets/banner_loader.webp';\r\n\r\nimport styles from '../scss/index.module.scss';\r\nimport ScrollTopButton from '../componenst/ScrollTopButton';\r\nimport { useOutletContext } from 'react-router-dom';\r\nimport { OutletContextType } from '../layouts/MainLayout';\r\n\r\nconst Menu: React.FC = () => {\r\n  const screenSize = useScreenSize();\r\n  const { currentCategory, categories } = useAppSelector(selectFilters);\r\n  const { banners, status } = useAppSelector(selectAssortment);\r\n  const { isHeaderInView } = useOutletContext<OutletContextType>();\r\n\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, []);\r\n\r\n  const setBanner = () => {\r\n    const banner = banners[categories.indexOf(currentCategory)];\r\n    if (status === Status.LOADING) {\r\n      return bannerLoader;\r\n    } else {\r\n      if (screenSize.width) {\r\n        if (screenSize.width > 820) {\r\n          return banner['1600'] ? banner['1600'] : bannerLoader;\r\n        } else if (screenSize.width > 420) {\r\n          return banner['820'] ? banner['820'] : bannerLoader;\r\n        } else if (screenSize.width <= 420) {\r\n          return banner['420'] ? banner['420'] : bannerLoader;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.banner_wrapper}>\r\n        {status !== 'error' && (\r\n          <img className={styles.menu_banner} src={setBanner()} alt=\"banner\" />\r\n        )}\r\n      </div>\r\n      <div className={styles.menu_wrapper}>\r\n        <Navigation navRange={[0, -2]} isFixed={!isHeaderInView} />\r\n        <Sort />\r\n        <AccortmentBlock />\r\n        <ScrollTopButton isShown={!isHeaderInView} />\r\n        {screenSize.width > 820 && (\r\n          <div className={`${styles.check_wrapper} ${!isHeaderInView ? styles.fixed : \"\"}`}>\r\n            <DeliveryRegion />\r\n            <Check />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n"],"names":["useState","width","height","screenSize","setScreenSize","useEffect","window","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","isShown","className","styles","onClick","scrollTo","src","arrow","alt","useScreenSize","useAppSelector","selectFilters","currentCategory","categories","selectAssortment","banners","status","isHeaderInView","useOutletContext","React","banner","indexOf","Status","bannerLoader","setBanner","navRange","isFixed"],"sourceRoot":""}